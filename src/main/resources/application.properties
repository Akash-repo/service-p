spring.application.name=service-p

server.port=8083

# Docker DB
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=mysecretpostgrespassword
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
# Use 'update' for development, 'none' or 'validate' for production
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Kafka Bootstrap Servers (your local Docker Kafka)
spring.kafka.bootstrap-servers=localhost:29092

# Kafka Producer Configuration
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.kafka.producer.acks=all
spring.kafka.producer.retries=3
spring.kafka.producer.properties.linger.ms=10
spring.kafka.producer.properties.batch.size=16384

# Custom property for our application-level retry logic (not used in async send, but kept for context)
app.kafka.producer.max-retries=5
app.kafka.producer.retry-delay-ms=1000

# Essential for Spring's JsonSerializer/JsonDeserializer when dealing with custom objects
spring.kafka.producer.properties.spring.json.add.type.headers=false
spring.kafka.producer.properties.spring.json.trusted.packages=com.interview.service_p.model.kafka.*

# Main Kafka Topic
app.kafka.producer.topic-name=ticker-analysis-requests

# Dead Letter Topic (DLT)
app.kafka.producer.dlt-topic-name=ticker-analysis-requests.DLT


# Schema Registry URL - IMPORTANT!
spring.kafka.properties.schema.registry.url=http://localhost:8081



# Configure Avro deserialization for the message value
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer

# Schema Registry URL - IMPORTANT!
spring.kafka.consumer.properties.schema.registry.url=http://localhost:8081
spring.kafka.consumer.properties.specific.avro.reader=true
# Redis Configuration
spring.data.redis.host=localhost
spring.data.redis.port=6379
# spring.data.redis.password=your_redis_password # Uncomment if Redis requires a password

# External REST API Configuration (using the new "rest.api" prefix)
rest.api.providers.fmp.base-url=https://financialmodelingprep.com/api
rest.api.providers.fmp.api-key=YOUR_FMP_API_KEY # REPLACE WITH YOUR ACTUAL FMP API KEY
rest.api.providers.fmp.resource-path=/v3/quote/{ticker}
rest.api.providers.fmp.max-retries=3
rest.api.providers.fmp.retry-delay-ms=500
rest.api.providers.fmp.timeout-ms=5000
rest.api.providers.fmp.db-staleness-threshold-minutes=240
# Data in DB considered stale after 4 hours, forcing API call

# Example for another provider (if you add one later)
# rest.api.providers.alpha-vantage.base-url=https://www.alphavantage.co/query
# rest.api.providers.alpha-vantage.api-key=YOUR_ALPHA_VANTAGE_API_KEY
# rest.api.providers.alpha-vantage.stock-quote-endpoint=function=GLOBAL_QUOTE&symbol={ticker}&apikey=
# rest.api.providers.alpha-vantage.max-retries=2
# rest.api.providers.alpha-vantage.retry-delay-ms=1000
# rest.api.providers.alpha-vantage.timeout-ms=8000
# rest.api.providers.alpha-vantage.db-staleness-threshold-minutes=1440
# 24 hours